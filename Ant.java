/**
 * @author Δημήτριος Παντελεήμων Γιακάτος
 * @version 1.0.0
 * Η κλάση Ant δημιουργεί ένα "μυρμήγκι" με συγκεκριμένα χαρακτηριστικά ώστε να βοηθήσει στη σωστή επεξεργασία και δομή
 * των δεδομένων.
 */
public class Ant implements Comparable<Ant> {

    public int vertical;
    public int edge;
    public double distance;
    public int antName;

    /**
     * Η μέθοδος είναι ο κενός constructor.
     */
    public Ant() {}

    /**
     * Η μέθοδος αυτή είναι μόνο για τη κλάση KruskalUnionFind, καθώς έχει συγκεκριμένη δομή, που χρειάζεται για την
     * συγκεκριμένη κλάση. Υπολογίζει την ευκλείδεια απόσταση μεταξύ δύο μυρμηγκιών, τα οποία αρχικά έχει αποθηκεύσει σε δύο
     * μεταβλητές, ώστε να μπορούμε να γνωρίζουμε τα μυρμήγκια που έχουν αυτή την απόσταση.
     * @param vertical Το πρώτο μυρμήγκι.
     * @param xA Η συντεταγμένη x του πρώτου μυρμηγκιού.
     * @param yA Η συντεταγμένη y του πρώτου μυρμηγκιού.
     * @param edge Το δεύτερο μυρμήγκι.
     * @param xB Η συντεταγμένη x του δεύτερου μυρμηγκιού.
     * @param yB Η συντεταγμένη y του δεύτερου μυρμηγκιού.
     * @return Το αντικείμενο Ant που έχει σχηματιστεί ύστερα από αυτή τη μέθοδο.
     */
    public Ant setDataForKUF(int vertical, double xA, double yA, int edge, double xB, double yB) {
        this.vertical = vertical;
        this.edge = edge;
        this.distance = Math.sqrt((xA-xB)*(xA-xB) + (yA-yB)*(yA-yB));
        return this;
    }

    /**
     * Η μέθοδος αυτή είναι μόνο για τη κλάση GaleShapley, καθώς έχει συγκεκριμένη δομή, που χρειάζεται για την
     * συγκεκριμένη κλάση. Υπολογίζει την ευκλείδεια απόσταση μεταξύ δύο μυρμηγκιών (αυτό που του σχηματίζεται ο πίνακας
     * προτιμήσεων και αυτού που προτείνει) και αποθηκεύει το όνομα του ενός μυρμηγκιού (αυτού που προτείνει). Αυτή η μέθοδος μας χρειάζεται
     * για το σχηματισμού του πίνακα προτιμήσεων όλων των μυρμηγκιών που είναι απαραίτητος στον αλγόριθμο Gale Shapley.
     * @param antName Το όνομα του μυρμηγκιού που προτιμά το μυρμήγκι που του σχηματίζεται ο πίνακας προτιμήσεων.
     * @param xA Η συντεταγμένη x του μυρμηγκιού που σχηματίζουμε τον πίνακα προτιμήσεων.
     * @param yA Η συντεταγμένη y του μυρμηγκιού που σχηματίζουμε τον πίνακα προτιμήσεων.
     * @param xB Η συντεταγμένη x του μυρμηγκιού που εξετάζουμε που προτιμά το μυρμήγκι που του σχηματίζεται ο πίνακας προτιμήσεων.
     * @param yB Η συντεταγμένη y του μυρμηγκιού που εξετάζουμε που προτιμά το μυρμήγκι που του σχηματίζεται ο πίνακας προτιμήσεων.
     * @return Το αντικείμενο Ant που έχει σχηματιστεί ύστερα από αυτή τη μέθοδο.
     */
    public Ant setDataForGS(int antName, double xA, double yA, double xB, double yB) {
        this.antName = antName;
        this.distance = Math.sqrt((xA-xB)*(xA-xB) + (yA-yB)*(yA-yB));
        return this;
    }

    /**
     * Η μέθοδος συγκρίνει την απόσταση μεταξύ δύο μυρμηγκιών, δηλαδή μεταξύ δύο αντικειμένων.
     * @param o Αντικείμενο τύπου Ant.
     * @return -1 αν η απόσταση του αντικείμενου είναι μικρότερη από την απόσταση του αντικειμένου που δέχεται ως παράμετρο.<br/>
     *          0 αν η απόσταση του αντικείμενου είναι ίση από την απόσταση του αντικειμένου που δέχεται ως παράμετρο.<br/>
     *          1 αν η απόσταση του αντικείμενου είναι μεγαλύτερη από την απόσταση του αντικειμένου που δέχεται ως παράμετρο.
     */
    @Override
    public int compareTo(Ant o) {
        if (distance < o.distance) {
            return -1;
        } else if (distance == o.distance) {
            return 0;
        }
        return 1;
    }
}
